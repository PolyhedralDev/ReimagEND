num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

num trunkHeight = 15+randomInt(4);
str trunkBlock = "minecraft:purple_concrete";
str altTrunkBlock = "minecraft:black_concrete";
num trunkWidth = 1;
str rootBlockX = "minecraft:purple_concrete";
str rootBlockZ = rootBlockX;
str altRootBlock = altTrunkBlock;

num sideBranchInterval = 3+randomInt(1);
num sideBranchMinHeight = 9+randomInt(3);
num sideBranchLengthMin = 5+randomInt(3);
num sideBranchLengthVariation = 1;
num sideBranchVerticalVariation = 1;
num sideBranchVerticalDirection = -(3+randomInt(randPrecision)/randPrecision)/3;
num sideBranchLeafRadiusMin = 1;
num sideBranchLeafTranslate = 0;
num sideBranchLeafTopFlatness = 2;
num sideBranchLeafBottomFlatness = 3;
num sideBranchLeafDensity = 0.7;
str sideBranchLeafStructure = "small_plumble_bulb";
str sideBranchBlockX = trunkBlock;
str sideBranchBlockY = trunkBlock;
str sideBranchBlockZ = trunkBlock;
str altSideBranchBlock = altRootBlock;

num topBranches = 1;
num topBranchLengthUpwardsMin = 8+randomInt(4);
num topBranchLengthOutwardsMin = 2+randomInt(2);
num topBranchVerticalDirection = 1;
num topBranchLeafRadiusMin = 1;
num topBranchLeafTranslate = 0;
num topBranchLeafTopFlatness = 2;
num topBranchLeafBottomFlatness = 3;
num topBranchLeafDensity = 0.5;
str topBranchLeafStructure = "plumble_bulb";
str topBranchBlockX = trunkBlock;
str topBranchBlockY = trunkBlock;
str topBranchBlockZ = trunkBlock;
str altTopBranchBlock = altRootBlock;

// Generate roots at base of trunk
num roots = 3;
num rootMaxDepth = 3;
num rootHeight = 3;
num rootLength = 4;
num rootAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num r = 0; r < roots; r = r + 1) {
    num dx = sin(rootAngle);
    num dz = cos(rootAngle);
    str rootBlock = rootBlockX;
    if (abs(dz) > abs(dx)) rootBlock = rootBlockZ;
    for (num l = 0; l <= (rootLength+randomInt(3)); l = l + 1) {
        num height = (rootHeight+randomInt(3)) * (1-(l/rootLength));
        bool bottomedOut = false;
        str placeRootBlock = rootBlock;
        for (num h = height; h >= -rootMaxDepth; h = h - 1) {
            if (check(round(l*dx),round(h),round(l*dz)) != "AIR") {
                bottomedOut = true;
                break;
            }
                placeRootBlock = rootBlock;
                if (randomInt(2) == 0) placeRootBlock = altRootBlock;
                block(l*dx, h, l*dz, placeRootBlock);
        }
        if (!bottomedOut) break;
    }
    rootAngle = rootAngle + goldenAngle;
}

num branchAngle = randomInt(randPrecision)/randPrecision*2*pi;
for (num i = 0; i < trunkHeight; i = i + 1) {
    if (i > sideBranchMinHeight) {
        if (i % sideBranchInterval == 0) {
            // Branch direction vector
            num dx = sin(branchAngle);
            num dy = sideBranchVerticalDirection + randomInt(randPrecision)/randPrecision*sideBranchVerticalVariation;
            num dz = cos(branchAngle);
            // Normalize vector
            num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
            dx = dx/mag;
            dy = dy/mag;
            dz = dz/mag;
            // Branch origin
            num ox = 0;
            num oy = i;
            num oz = 0;
            // Set branch block based on largest unsigned vector component
            str branchBlock = sideBranchBlockY;
            if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = sideBranchBlockX;
            else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = sideBranchBlockZ;
            num branchLength = sideBranchLengthMin + randomInt(randPrecision)/randPrecision*sideBranchLengthVariation;
            // Generate branch
            str placeBranchBlock = branchBlock;
            for (num l = 0; l <= branchLength; l = l + 1) {
                placeBranchBlock = branchBlock;
                if (randomInt(2) == 0) placeBranchBlock = altSideBranchBlock;
                block(l*dx+ox, l*dy+oy, l*dz+oz, placeBranchBlock);
            }
            // Rotate angle of next branch
            branchAngle = branchAngle + goldenAngle;
            // Generate leaf cluster at the end of the branch
            num radius = sideBranchLeafRadiusMin-randomInt(2);
            num radiusSquared = pow(radius, 2);
            // Leaf cluster origin (end of branch)
            num lox = ox+branchLength*dx;
            num loy = oy+branchLength*dy + sideBranchLeafTranslate;
            num loz = oz+branchLength*dz;
            structure(lox, loy, loz, sideBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
            

        }
    }
    str placeTrunkBlock = trunkBlock;
    for (num x = 0; x < trunkWidth; x = x + 1) {
        for (num z = 0; z < trunkWidth; z = z + 1) {
            placeTrunkBlock = trunkBlock;
            if (randomInt(2) == 0) placeTrunkBlock = altTrunkBlock;
            block(x, i, z, placeTrunkBlock);
        }
    }
}

for (num b = 1; b <= topBranches; b = b + 1) {
    num t = b/topBranches;
    num ti = 1-t;
    // Branch direction vector
    num dx = sin(branchAngle) * t;
    num dy = topBranchVerticalDirection;
    num dz = cos(branchAngle) * t;
    // Normalize vector
    num mag = sqrt(pow(dx,2)+pow(dy,2)+pow(dz,2));
    dx = dx/mag;
    dy = dy/mag;
    dz = dz/mag;
    // Branch origin
    num ox = 0;
    num oy = trunkHeight;
    num oz = 0;
    // Set branch block based on largest unsigned vector component
    str branchBlock = topBranchBlockY;
    if (abs(dx) > max(abs(dy),abs(dz))) branchBlock = topBranchBlockX;
    else if (abs(dz) > max(abs(dy),abs(dx))) branchBlock = topBranchBlockZ;
    num branchLength = topBranchLengthUpwardsMin*ti + topBranchLengthOutwardsMin*t;
    // Generate top branch
    str placeBranchBlock = branchBlock;
    for (num l = 0; l <= branchLength; l = l + 1) {
        placeBranchBlock = branchBlock;
        if (randomInt(2) == 0) placeBranchBlock = altTopBranchBlock;
        block(l*dx+ox, l*dy+oy, l*dz+oz, placeBranchBlock);
    }
    // Rotate angle of next branch
    branchAngle = branchAngle + goldenAngle;
    // Generate leaf cluster at the end of the branch
    num radius = topBranchLeafRadiusMin-randomInt(3);
    num radiusSquared = pow(radius, 2);
    // Leaf cluster origin (end of branch)
    num lox = ox+branchLength*dx;
    num loy = oy+branchLength*dy + topBranchLeafTranslate;
    num loz = oz+branchLength*dz;
    structure(lox, loy, loz, topBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
}

block(0, -1, 0, "minecraft:end_stone");