num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

num trunkHeight = 4;
num trunkBase = 0;
num trunkRadius = 1;
str mainBlock = "minecraft:stripped_crimson_hyphae";
str altBlock = mainBlock;

num branchRadius = 1;
num sideBranchInterval = 100;
num sideBranchMinHeight = 1 + randomInt(3);
num sideBranchLengthMin = 6 + randomInt(4);
num sideBranchLengthVariation = 4;
num sideBranchVerticalVariation = 0;
num sideBranchVerticalDirection = 1 - randomInt(randPrecision) / randPrecision * 2;
num sideBranchLeafRadiusMin = 1;
num sideBranchLeafTranslate = 0;
num sideBranchLeafTopFlatness = 1;
num sideBranchLeafBottomFlatness = 2;
num sideBranchLeafDensity = 0.5;
str sideBranchLeafStructure = "end_spruce_leaves_clump";

num topBranches = 1 + randomInt(3);
num topBranchRadius = 0.75;
num topBranchMaxLength = 7;
num topBranchDroop = 0.08;
num topBranchDroopVariation = 0.04;
num topBranchLeafRadiusMin = 1.5;
num topBranchLeafTopFlatness = 0.6;
num topBranchLeafBottomFlatness = 0.6;
num topBranchLeafDensity = 1;
num topBranchLeafTranslate = 0;
num angle = randomInt(randPrecision) / randPrecision * 2 * pi;
str topBranchLeafStructure = "end_spruce_leaves_clump";

num xOffset = 0;
num zOffset = 0;
// Generate roots at base of trunk
str rootBlock = "minecraft:stripped_crimson_hyphae";
num roots = 3 + randomInt(3);
num rootMaxDepth = 3;
num rootHeight = 3;
num rootLength = 2;
num rootAngle = randomInt(randPrecision) / randPrecision * 2 * pi;
for (num r = 0; r < roots; r = r + 1) {
    num dx = sin(rootAngle);
    num dz = cos(rootAngle);
    for (num l = 0; l <= rootLength; l = l + 1) {
        num height = rootHeight * (1 - (l / rootLength));
        bool bottomedOut = false;
        for (num h = height; h >= -rootMaxDepth; h = h - 1) {
            if (check(round(l * dx), round(h), round(l * dz)) != "AIR") {
                bottomedOut = true;
                break;
            }
            block(l * dx, h, l * dz, rootBlock);
        }
        if (!bottomedOut) break;
    }
    rootAngle = rootAngle + goldenAngle;
}

num branchAngle = randomInt(randPrecision) / randPrecision * 2 * pi;
for (num i = 0; i < trunkHeight; i = i + 1) {
    if (i > sideBranchMinHeight) {
        if (i % sideBranchInterval == 0) {
            // Branch direction vector
            num dx = sin(branchAngle);
            num dy = sideBranchVerticalDirection + randomInt(randPrecision) / randPrecision * sideBranchVerticalVariation;
            num dz = cos(branchAngle);
            // Normalize vector
            num mag = sqrt(pow(dx, 2) + pow(dy, 2) + pow(dz, 2));
            dx = dx / mag;
            dy = dy / mag;
            dz = dz / mag;
            // Branch origin
            num ox = xOffset;
            num oy = i + trunkBase;
            num oz = zOffset;
            // Set branch block based on largest unsigned vector component
            num branchLength = sideBranchLengthMin + randomInt(randPrecision) / randPrecision * sideBranchLengthVariation;
            // Generate branch

            for (num l = 0; l <= branchLength; l = l + 1) {
                if (getBlock(l * dx + ox, l * dy + oy, l * dz + oz) == "minecraft:endstone") break;
                for (num x = -branchRadius; x < branchRadius; x = x + 1) {
                    for (num y = -branchRadius; y < branchRadius; y = y + 1) {
                        for (num z = -branchRadius; z < branchRadius; z = z + 1) {
                            if (pow(x,2)+pow(y,2)+pow(z,2) < pow(branchRadius,2) ) {
                                if (randomInt(2) == 0) {
                                    block(l * dx + ox + x + xOffset, l * dy + oy + y, l * dz + oz + z + zOffset, altBlock);
                                    block(l * dx + ox + x + xOffset, l * dy + oy + y - 1, l * dz + oz + z + zOffset, mainBlock);
                                } else block(l * dx + ox + x + xOffset, l * dy + oy + y, l * dz + oz + z + zOffset, mainBlock);
                            }
                        }
                    }
                }
            }
            // Rotate angle of next branch
            branchAngle = branchAngle + goldenAngle;
            // Generate leaf cluster at the end of the branch
            num radius = sideBranchLeafRadiusMin;
            num radiusSquared = pow(radius, 2);
            // Leaf cluster origin (end of branch)
            num lox = ox + branchLength * dx;
            num loy = oy + branchLength * dy + sideBranchLeafTranslate;
            num loz = oz + branchLength * dz;
            for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
                for (num cy = ceil(-radius / sideBranchLeafBottomFlatness); cy <= ceil(radius / sideBranchLeafTopFlatness); cy = cy + 1) {
                    for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                        num squashFactor = sideBranchLeafBottomFlatness;
                        if (cy > 0) squashFactor = sideBranchLeafTopFlatness;
                        num distanceSquared = pow(cx, 2) + pow(cy * squashFactor, 2) + pow(cz, 2);
                        if (distanceSquared < radiusSquared && randomInt(randPrecision) / randPrecision < sideBranchLeafDensity) {
                            structure(lox + cx, loy + cy, loz + cz, sideBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                        }
                    }
                }
            }
        }
    }
    for (num x = -trunkRadius; x < trunkRadius; x = x + 1) {
        for (num y = -trunkRadius; y < trunkRadius; y = y + 1) {
            for (num z = -trunkRadius; z < trunkRadius; z = z + 1) {
                if (pow(x,2)+pow(y,2)+pow(z,2) < pow(trunkRadius,2) ) {
                    if (randomInt(2) == 0) {
                        block(x + xOffset, i + y + 1, z + zOffset, altBlock);
                        block(x + xOffset, i + y, z + zOffset, altBlock);
                        block(x + xOffset, i + y - 1, z + zOffset, mainBlock);
                    } else block(x + xOffset, i + y, z + zOffset, mainBlock);
                }
            }
        }
    }
}

for (num b = 1; b <= topBranches; b = b + 1) {
    num droop = -topBranchDroop-(randomInt(topBranchDroopVariation*100)/100);
    num verticalDirection = 2+randomInt(randPrecision)/randPrecision;

    // Branch direction vector
    num dx = sin(angle);
    num dy = verticalDirection;
    num dz = cos(angle);
    // Normalize vector
    num mag = sqrt(pow(dx, 2) + pow(dy, 2) + pow(dz, 2));
    dx = dx / mag;
    dy = dy / mag;
    dz = dz / mag;

    for (num i = 0; i <= topBranchMaxLength; i = i + 0.5) {
        num ox = i * dx;
        num oy = trunkHeight + trunkBase + i * dy;
        num oz = i * dz;

        if (getBlock(ox + xOffset, oy, oz + zOffset) != mainBlock &&
            getBlock(ox + xOffset, oy, oz + zOffset) != altBlock &&
            getBlock(ox + xOffset, oy, oz + zOffset) != "minecraft:air") {
            break;
        }

        for (num x = -topBranchRadius; x < topBranchRadius; x = x + 1) {
            for (num y = -topBranchRadius; y < topBranchRadius; y = y + 1) {
                for (num z = -topBranchRadius; z < topBranchRadius; z = z + 1) {
                    if (pow(x,2)+pow(y,2)+pow(z,2) < pow(topBranchRadius,2) ) {
                        if (randomInt(2) == 0) {
                            block(ox + x + xOffset, oy + y, oz + z + zOffset, altBlock);
                            block(ox + x + xOffset, oy + y - 1, oz + z + zOffset, mainBlock);
                        } else block(ox + x + xOffset, oy + y, oz + z + zOffset, mainBlock);
                    }
                }
            }
        }

        // Point vector down more
        dy = dy + droop;
        // Normalize vector
        mag = sqrt(pow2(dx) + pow2(dy) + pow2(dz));
        dx = dx / mag;
        dy = dy / mag;
        dz = dz / mag;
    }

    num ox = topBranchMaxLength * dx;
    num oy = topBranchLeafTranslate + trunkHeight + trunkBase + topBranchMaxLength * dy;
    num oz = topBranchMaxLength * dz;

    // Generate leaf cluster at the end of the branch
    num radius = topBranchLeafRadiusMin;
    num radiusSquared = pow(radius, 2);
    for (num cx = ceil(-radius); cx <= ceil(radius); cx = cx + 1) {
        for (num cy = ceil(-radius / topBranchLeafBottomFlatness); cy <= ceil(radius / topBranchLeafTopFlatness); cy = cy + 1) {
            for (num cz = ceil(-radius); cz <= ceil(radius); cz = cz + 1) {
                num squashFactor = topBranchLeafBottomFlatness;
                if (cy > 0) squashFactor = topBranchLeafTopFlatness;
                num distanceSquared = pow(cx, 2) + pow(cy * squashFactor, 2) + pow(cz, 2);
                if (distanceSquared < radiusSquared && randomInt(randPrecision) / randPrecision < topBranchLeafDensity) {
                    structure(ox + cx, oy + cy, oz + cz, topBranchLeafStructure, "NONE", "CW_90", "CCW_90", "CW_180");
                }
            }
        }
    }

    angle = angle + goldenAngle;
}