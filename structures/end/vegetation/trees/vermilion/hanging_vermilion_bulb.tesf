num randPrecision = 100;
num goldenAngle = 2.39996;
num pi = 3.14159;

num yTranslate = -3 - randomInt(3);
num baseRadius = 3;
num strandRadius = 1.25;
num length = 15 + randomInt(10);

str mainBlock = "minecraft:red_concrete";
str altBlock = "minecraft:fire_coral_block";

if (getBlock(baseRadius*2, -yTranslate + 5, 0) == "minecraft:air" ||
    getBlock(-baseRadius*2, -yTranslate + 5, 0) == "minecraft:air" ||
    getBlock(0, -yTranslate + 5, baseRadius*2) == "minecraft:air" ||
    getBlock(0, -yTranslate + 5, -baseRadius*2) == "minecraft:air") fail;

num rootRadius = 1.5;
num roots = 3 + randomInt(2);
num rootMaxLength = 15;
num rootDroop = -0.06;
num rootVerticalDirection = -0.2 - randomInt(randPrecision) / randPrecision * 0.3;
num rootAngle = randomInt(randPrecision) / randPrecision * 2 * pi;

str setBlock = mainBlock;
for (num r = 0; r < roots; r = r + 1) {
    // Branch direction vector
    num dx = sin(rootAngle);
    num dy = rootVerticalDirection;
    num dz = cos(rootAngle);
    // Normalize vector
    num mag = sqrt(pow(dx, 2) + pow(dy, 2) + pow(dz, 2));
    dx = dx / mag;
    dy = dy / mag;
    dz = dz / mag;

    for (num i = 0; i <= rootMaxLength; i = i + 0.5) {
        num cx = i * dx;
        num cy = yTranslate + i * dy;
        num cz = i * dz;

        // Place root block
        if (getBlock(cx, cy, cz) == "minecraft:end_stone" ||
            getBlock(cx+1, cy, cz+1) == "minecraft:end_stone" ||
            getBlock(cx, cy, cz+1) == "minecraft:end_stone" ||
            getBlock(cx+1, cy, cz) == "minecraft:end_stone") {
            break;
        }

        for (num x = -rootRadius; x < rootRadius; x = x + 1) {
            for (num y = -rootRadius; y < rootRadius; y = y + 1) {
                for (num z = -rootRadius; z < rootRadius; z = z + 1) {
                    if (pow(x,2)+pow(y,2)+pow(z,2) < pow(rootRadius,2) ) {
                        setBlock = mainBlock;
                        if (randomInt(2) == 0) setBlock = altBlock;
                        block(cx + x, cy + y, cz + z, setBlock);
                    }
                }
            }
        }

        // Point vector down more
        dy = dy - rootDroop;

        // Normalize vector
        mag = sqrt(pow2(dx) + pow2(dy) + pow2(dz));
        dx = dx / mag;
        dy = dy / mag;
        dz = dz / mag;
    }

    rootAngle = rootAngle + goldenAngle;
}

num xOffset = 0;
num zOffset = 0;
for (num i = 0; i < length; i = i + 1) {
    num radius = baseRadius;
    if (i < length/1.5) radius = strandRadius + randomInt(2);

    if (getBlock(0, -i + yTranslate - 5, 0) != "minecraft:air" || i == length-1) {
        structure(xOffset, -i + yTranslate, zOffset, "vermilion_bulb", "NONE");
        break;
    }

    for (num x = -radius; x < radius; x = x + 1) {
        for (num y = -radius; y < radius; y = y + 1) {
            for (num z = -radius; z < radius; z = z + 1) {
                if (pow(x,2)+pow(y,2)+pow(z,2) < pow(radius,2) ) {
                    setBlock = mainBlock;
                    if (randomInt(2) == 0) setBlock = altBlock;
                    block(x + xOffset, -i + y + yTranslate, z + zOffset, setBlock);
                }
            }
        }
    }

    xOffset = (1 - randomInt(3));
    zOffset = (1 - randomInt(3));
}