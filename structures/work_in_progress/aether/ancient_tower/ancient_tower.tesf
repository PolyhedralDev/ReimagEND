num width = 12;
num roomHeight = 12;
num radius = 12;
num bottom = 30;
num checkBottom = 30;
num rooms = 2;
num towerHeight = ((roomHeight*rooms));
num degree = 0;
str setBlock = "ruin_block";

for (num h = 0; h < checkBottom; h = h + 1) {
   if (getBlock(0,-h,0) != "minecraft:air") {
       bottom = h + 10;
       break;
    }

    if (getBlock(0,-h,0) != "minecraft:air" && (h == checkBottom-1)) {
    fail;
   }
}

for (num y = -bottom; y <= towerHeight; y = y + 1) {
    for (num x = -radius; x <= radius; x = x + 1) {
        for (num z = -radius; z <= radius; z = z + 1) {
        // fill top
            if (pow(x,2)+pow(z,2) > pow(radius,2) && pow(x,2)+pow(z,2) < pow(radius+0.5,2) && (y > towerHeight-2)) structure(x,y,z,setBlock,"NONE");

        // fill bottom  
            if (pow(x,2)+pow(z,2) < pow(radius,2) && (y <= 0)) structure(x,y,z,setBlock,"NONE");

        // fill walls
            if (pow(x,2)+pow(z,2) < pow(radius,2) && pow(x,2)+pow(z,2) > (pow(radius-1,2)) && (y >= 0)) structure(x,y,z,setBlock,"NONE");

        // random rooms
            if (y % (roomHeight-1) == 0 && z == 0 && x == 0 && y >= 0) {
                structure(0,y,0,"ancient_tower_room","NONE");
            }

            

        // fill floors
         if ((y % (roomHeight-1) == 0) && (pow(x,2)+pow(z,2) < pow(radius+0.5,2)) && (y > 0) ) structure(x,y,z,setBlock,"NONE");
        }
    }
}

for (num y = -bottom; y <= towerHeight; y = y + 0.01) {
degree = degree + 1;
    structure(radius*cos(degree),y,radius*sin(degree),setBlock,"NONE");
}







